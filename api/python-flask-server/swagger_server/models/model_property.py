# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ModelProperty(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, score: int=None, price: float=None, lattitude: float=None, longitude: float=None, address: str=None, type: str=None):  # noqa: E501
        """ModelProperty - a model defined in Swagger

        :param id: The id of this ModelProperty.  # noqa: E501
        :type id: int
        :param score: The score of this ModelProperty.  # noqa: E501
        :type score: int
        :param price: The price of this ModelProperty.  # noqa: E501
        :type price: float
        :param lattitude: The lattitude of this ModelProperty.  # noqa: E501
        :type lattitude: float
        :param longitude: The longitude of this ModelProperty.  # noqa: E501
        :type longitude: float
        :param address: The address of this ModelProperty.  # noqa: E501
        :type address: str
        :param type: The type of this ModelProperty.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'id': int,
            'score': int,
            'price': float,
            'lattitude': float,
            'longitude': float,
            'address': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'score': 'score',
            'price': 'price',
            'lattitude': 'lattitude',
            'longitude': 'longitude',
            'address': 'address',
            'type': 'type'
        }

        self._id = id
        self._score = score
        self._price = price
        self._lattitude = lattitude
        self._longitude = longitude
        self._address = address
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'ModelProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Property of this ModelProperty.  # noqa: E501
        :rtype: ModelProperty
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ModelProperty.


        :return: The id of this ModelProperty.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ModelProperty.


        :param id: The id of this ModelProperty.
        :type id: int
        """

        self._id = id

    @property
    def score(self) -> int:
        """Gets the score of this ModelProperty.


        :return: The score of this ModelProperty.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score: int):
        """Sets the score of this ModelProperty.


        :param score: The score of this ModelProperty.
        :type score: int
        """

        self._score = score

    @property
    def price(self) -> float:
        """Gets the price of this ModelProperty.


        :return: The price of this ModelProperty.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this ModelProperty.


        :param price: The price of this ModelProperty.
        :type price: float
        """

        self._price = price

    @property
    def lattitude(self) -> float:
        """Gets the lattitude of this ModelProperty.


        :return: The lattitude of this ModelProperty.
        :rtype: float
        """
        return self._lattitude

    @lattitude.setter
    def lattitude(self, lattitude: float):
        """Sets the lattitude of this ModelProperty.


        :param lattitude: The lattitude of this ModelProperty.
        :type lattitude: float
        """

        self._lattitude = lattitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this ModelProperty.


        :return: The longitude of this ModelProperty.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this ModelProperty.


        :param longitude: The longitude of this ModelProperty.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def address(self) -> str:
        """Gets the address of this ModelProperty.


        :return: The address of this ModelProperty.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this ModelProperty.


        :param address: The address of this ModelProperty.
        :type address: str
        """

        self._address = address

    @property
    def type(self) -> str:
        """Gets the type of this ModelProperty.


        :return: The type of this ModelProperty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ModelProperty.


        :param type: The type of this ModelProperty.
        :type type: str
        """
        allowed_values = ["House", "Condo", "Multi"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
