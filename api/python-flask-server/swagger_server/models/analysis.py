# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Analysis(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, income: float=None, price: float=None, rent: float=None, taxes: float=None, mortgate: float=None, insurance: float=None, repair: float=None, homeowners: float=None, return_cash: float=None, return_mortgage: float=None, cap_rate: float=None):  # noqa: E501
        """Analysis - a model defined in Swagger

        :param income: The income of this Analysis.  # noqa: E501
        :type income: float
        :param price: The price of this Analysis.  # noqa: E501
        :type price: float
        :param rent: The rent of this Analysis.  # noqa: E501
        :type rent: float
        :param taxes: The taxes of this Analysis.  # noqa: E501
        :type taxes: float
        :param mortgate: The mortgate of this Analysis.  # noqa: E501
        :type mortgate: float
        :param insurance: The insurance of this Analysis.  # noqa: E501
        :type insurance: float
        :param repair: The repair of this Analysis.  # noqa: E501
        :type repair: float
        :param homeowners: The homeowners of this Analysis.  # noqa: E501
        :type homeowners: float
        :param return_cash: The return_cash of this Analysis.  # noqa: E501
        :type return_cash: float
        :param return_mortgage: The return_mortgage of this Analysis.  # noqa: E501
        :type return_mortgage: float
        :param cap_rate: The cap_rate of this Analysis.  # noqa: E501
        :type cap_rate: float
        """
        self.swagger_types = {
            'income': float,
            'price': float,
            'rent': float,
            'taxes': float,
            'mortgate': float,
            'insurance': float,
            'repair': float,
            'homeowners': float,
            'return_cash': float,
            'return_mortgage': float,
            'cap_rate': float
        }

        self.attribute_map = {
            'income': 'income',
            'price': 'price',
            'rent': 'rent',
            'taxes': 'taxes',
            'mortgate': 'mortgate',
            'insurance': 'insurance',
            'repair': 'repair',
            'homeowners': 'homeowners',
            'return_cash': 'returnCash',
            'return_mortgage': 'returnMortgage',
            'cap_rate': 'capRate'
        }

        self._income = income
        self._price = price
        self._rent = rent
        self._taxes = taxes
        self._mortgate = mortgate
        self._insurance = insurance
        self._repair = repair
        self._homeowners = homeowners
        self._return_cash = return_cash
        self._return_mortgage = return_mortgage
        self._cap_rate = cap_rate

    @classmethod
    def from_dict(cls, dikt) -> 'Analysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Analysis of this Analysis.  # noqa: E501
        :rtype: Analysis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def income(self) -> float:
        """Gets the income of this Analysis.


        :return: The income of this Analysis.
        :rtype: float
        """
        return self._income

    @income.setter
    def income(self, income: float):
        """Sets the income of this Analysis.


        :param income: The income of this Analysis.
        :type income: float
        """

        self._income = income

    @property
    def price(self) -> float:
        """Gets the price of this Analysis.


        :return: The price of this Analysis.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Analysis.


        :param price: The price of this Analysis.
        :type price: float
        """

        self._price = price

    @property
    def rent(self) -> float:
        """Gets the rent of this Analysis.


        :return: The rent of this Analysis.
        :rtype: float
        """
        return self._rent

    @rent.setter
    def rent(self, rent: float):
        """Sets the rent of this Analysis.


        :param rent: The rent of this Analysis.
        :type rent: float
        """

        self._rent = rent

    @property
    def taxes(self) -> float:
        """Gets the taxes of this Analysis.


        :return: The taxes of this Analysis.
        :rtype: float
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes: float):
        """Sets the taxes of this Analysis.


        :param taxes: The taxes of this Analysis.
        :type taxes: float
        """

        self._taxes = taxes

    @property
    def mortgate(self) -> float:
        """Gets the mortgate of this Analysis.


        :return: The mortgate of this Analysis.
        :rtype: float
        """
        return self._mortgate

    @mortgate.setter
    def mortgate(self, mortgate: float):
        """Sets the mortgate of this Analysis.


        :param mortgate: The mortgate of this Analysis.
        :type mortgate: float
        """

        self._mortgate = mortgate

    @property
    def insurance(self) -> float:
        """Gets the insurance of this Analysis.


        :return: The insurance of this Analysis.
        :rtype: float
        """
        return self._insurance

    @insurance.setter
    def insurance(self, insurance: float):
        """Sets the insurance of this Analysis.


        :param insurance: The insurance of this Analysis.
        :type insurance: float
        """

        self._insurance = insurance

    @property
    def repair(self) -> float:
        """Gets the repair of this Analysis.


        :return: The repair of this Analysis.
        :rtype: float
        """
        return self._repair

    @repair.setter
    def repair(self, repair: float):
        """Sets the repair of this Analysis.


        :param repair: The repair of this Analysis.
        :type repair: float
        """

        self._repair = repair

    @property
    def homeowners(self) -> float:
        """Gets the homeowners of this Analysis.


        :return: The homeowners of this Analysis.
        :rtype: float
        """
        return self._homeowners

    @homeowners.setter
    def homeowners(self, homeowners: float):
        """Sets the homeowners of this Analysis.


        :param homeowners: The homeowners of this Analysis.
        :type homeowners: float
        """

        self._homeowners = homeowners

    @property
    def return_cash(self) -> float:
        """Gets the return_cash of this Analysis.


        :return: The return_cash of this Analysis.
        :rtype: float
        """
        return self._return_cash

    @return_cash.setter
    def return_cash(self, return_cash: float):
        """Sets the return_cash of this Analysis.


        :param return_cash: The return_cash of this Analysis.
        :type return_cash: float
        """

        self._return_cash = return_cash

    @property
    def return_mortgage(self) -> float:
        """Gets the return_mortgage of this Analysis.


        :return: The return_mortgage of this Analysis.
        :rtype: float
        """
        return self._return_mortgage

    @return_mortgage.setter
    def return_mortgage(self, return_mortgage: float):
        """Sets the return_mortgage of this Analysis.


        :param return_mortgage: The return_mortgage of this Analysis.
        :type return_mortgage: float
        """

        self._return_mortgage = return_mortgage

    @property
    def cap_rate(self) -> float:
        """Gets the cap_rate of this Analysis.


        :return: The cap_rate of this Analysis.
        :rtype: float
        """
        return self._cap_rate

    @cap_rate.setter
    def cap_rate(self, cap_rate: float):
        """Sets the cap_rate of this Analysis.


        :param cap_rate: The cap_rate of this Analysis.
        :type cap_rate: float
        """

        self._cap_rate = cap_rate
